//#snippet INVALID_ITERATOR_SLOT INVALID_ITERATOR_SLOT

native Iter_Init(IteratorArray:Name[]<>);
native Iter_Add(Iterator:Name<>, value);
native Iter_Remove(Iterator:Name<>, value);
native Iter_Free(Iterator:Name<>);
native Iter_FreeMulti(Iterator:Name<>);
native Iter_Contains(Iterator:Name<>, value);
native Iter_GetMulti(Iterator:Name<>, value);
native Iter_SafeRemove(Iterator:Name<>, value, &next);
native Iter_Random(Iterator:Name<>);
native Iter_Count(Iterator:Name<>);
native Iter_Clear(IteratorArray:Name[]<>);
native Iter_Alloc(Iterator:Name<>);
native Iter_FastClear(IteratorArray:Name[]<>);
native Iter_Init(IteratorArray:Name[]<>);
native Iter_Add(Iterator:Name<>, value);
native Iter_Remove(Iterator:Name<>, value);
native Iter_Free(Iterator:Name<>);
native Iter_Remove(Iterator:Name<>, value);
native Iter_SafeRemove(Iterator:Name<>, value, &next);
native Iter_Random(Iterator:Name<>);
native Iter_Count(Iterator:Name<>);
native Iter_Clear(IteratorArray:Name[]<>);
native Iter_FastClear(IteratorArray:Name[]<>);

native Float:sqrtN(Float:value,Float:exponent);
native abs(value);
native Float:fabs(Float:value);
native power(value,Float:exponent);
native IsEven(value);
native Tryg3D::RandomFloat(Float:min,Float:max,accuracy=4);
native Tryg3D::CompressRotation(Float:rotation);
native Tryg3D::DeCompressRotation(Float:rotation);
native Tryg3D::IsRotationTest(Float:rotation,Float:r_min,Float:r_max);
native Tryg3D::GivePlayerDamage(targetid,Float:amount,playerid,weaponid,bodypart);
native Tryg3D::GetWeaponDamage(weaponid);
native Tryg3D::SwapInt(variable1,variable2);
native Tryg3D::IsPlayerSpawned(playerid);
native CountVisibleActors(playerid);
native CountVisibleVehicles(playerid);
native CountVisiblePlayers(playerid,bool:isplayer=true,bool:isnpc=true);
native Float:ShiftDegreeToRadian(Float:deg);
native Float:ShiftDegreeToRadianEx(Float:deg);
native Float:ShiftDegreeToGrades(Float:deg);
native Float:ShiftRadianToDegree(Float:rad);
native Float:ShiftRadianToDegreeEx(Float:rad);
native Float:ShiftRadianToGrades(Float:rad);
native Float:ShiftGradesToDegree(Float:grad);
native Float:ShiftGradesToRadian(Float:grad);
native GetRandomHit(Float:x,Float:y,Float:z,range,&Float:tx,&Float:ty,&Float:tz);
native Float:GetDistanceBetweenPoints1D(Float:x1,Float:x2);
native Float:GetDistanceBetweenPoints2D(Float:x1,Float:y1,Float:x2,Float:y2);
native Float:GetDistanceBetweenPoints3D(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
native GetPointInFront2D(Float:x,Float:y,Float:rz,Float:radius,&Float:tx,&Float:ty);
native GetPointInFront3D(Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native GetPointInFront3DEx(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native Float:GetPointInFrontOfPlayer(playerid,&Float:tx,&Float:ty,Float:radius);
native Float:GetPointInFrontOfCamera2D(playerid,&Float:tx,&Float:ty,Float:radius);
native GetPointInFrontOfCamera3D(playerid,&Float:tx,&Float:ty,&Float:tz,Float:radius,&Float:rx=0.0,&Float:rz=0.0);
native GetRotationFor2Point2D(Float:x,Float:y,Float:tx,Float:ty,&Float:rz);
native GetRotationFor2Point3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,&Float:rx,&Float:rz);
native GetMoveTime(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:speed,&rtime=0);
native GetSpeedForMoveTime(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,&Float:speed,rtime);
native GetVehicleRotation(vehicleid,&Float:rx,&Float:ry,&Float:rz);
native Float:GetPointInFrontOfVehicle2D(vehicleid,&Float:tx,&Float:ty,Float:radius);
native GetPointInFrontOfVehicle3D(vehicleid,&Float:tx,&Float:ty,&Float:tz,Float:radius,&Float:rx=0.0,&Float:rz=0.0);
native GetPlayerCameraRotation(playerid,&Float:rx,&Float:rz);
native SetPlayerCameraRotation(playerid,Float:rx,Float:rz);
native Float:GetPlayerCameraZAngle(playerid,&Float:rz=0.0);
native SetPlayerCameraZAngle(playerid,Float:rz);
native GetPointFor2Point2D(Float:x1,Float:y1,Float:x2,Float:y2,Float:percent_size,&Float:tx,&Float:ty);
native GetPointFor2Point3D(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2,Float:percent_size,&Float:tx,&Float:ty,&Float:tz);
native GetPointFor2Point2DEx(Float:x1,Float:y1,Float:x2,Float:y2,Float:distance,&Float:tx,&Float:ty);
native GetPointFor2Point3DEx(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2,Float:distance,&Float:tx,&Float:ty,&Float:tz);
native ShiftVectorToRotation(Float:vx,Float:vy,Float:vz,&Float:rx,&Float:rz);
native ShiftRotationToVector(Float:rx,Float:rz,&Float:vx,&Float:vy,&Float:vz);
native GetPointToPointVector(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,&Float:vx,&Float:vy,&Float:vz);
native IsPointBetween2Points2D(Float:px,Float:py,Float:xA,Float:yA,Float:xB,Float:yB);
native IsPointBetween2Points3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB);
native IsPointNearly2Points2D(Float:px,Float:py,Float:xA,Float:yA,Float:xB,Float:yB,Float:maxdist);
native IsPointNearly2Points3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:maxdist);
native Area::PointInCircle(Float:px,Float:py,Float:x,Float:y,Float:radius);
native Area::PointInCylinder3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:radius);
native Area::PointInCylinder2D(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:minz,Float:maxz,Float:radius);
native Area::PointInSphere(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:radius);
native Area::PointInRectangle(Float:x,Float:y,Float:minx,Float:miny,Float:maxx,Float:maxy);
native Area::PointInCube(Float:x,Float:y,Float:z,Float:minx,Float:miny,Float:minz,Float:maxx,Float:maxy,Float:maxz);
native Area::PointInPolygon(Float:x,Float:y,Float:points[],maxpoints=sizeof(points));
native Area::PointInCircularSector(Float:px,Float:py,Float:x,Float:y,Float:rz,Float:radius,Float:view_angle);
native Area::PointInSphericalSector(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz);
native Area::PointInCone3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:pointA_radius,Float:pointB_radius);
native Area::PointInCube3D(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z);
native Area::PointInEllipse(Float:px,Float:py,Float:cx,Float:cy,Float:size_x,Float:size_y);
native Area::PointInEllipticalCylinder(Float:px,Float:py,Float:pz,Float:cx,Float:cy,Float:minz,Float:maxz,Float:size_x,Float:size_y);
native Area::PointInSphericalSectorEx(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz,bool:testLOS=true,bool:veh_col=false);
native Random::PointInCircle(Float:x,Float:y,Float:radius,&Float:tx,&Float:ty);
native Random::PointInCylinder2D(Float:x,Float:y,Float:minz,Float:maxz,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointInCylinder3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointInSphere(Float:x,Float:y,Float:z,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointInRectangle(Float:minx,Float:miny,Float:maxx,Float:maxy,&Float:tx,&Float:ty);
native Random::PointInCube(Float:minx,Float:miny,Float:minz,Float:maxx,Float:maxy,Float:maxz,&Float:tx,&Float:ty,&Float:tz);
native Random::PointInPolygon(Float:points[],&Float:tx,&Float:ty,maxpoints=sizeof(points));
native Random::PointInCircularSector(Float:x,Float:y,Float:rz,Float:radius,Float:view_angle,&Float:tx,&Float:ty);
native Random::PointInSphericalSector(Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz,&Float:tx,&Float:ty,&Float:tz);
native Random::PointInCone3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:pointA_radius,Float:pointB_radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointInCube3D(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z,&Float:tx,&Float:ty,&Float:tz);
native Random::PointInEllipse(Float:cx,Float:cy,Float:size_x,Float:size_y,&Float:tx,&Float:ty);
native Random::PointInEllipticalCyl2D(Float:cx,Float:cy,Float:minz,Float:maxz,Float:size_x,Float:size_y,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnCircle(Float:x,Float:y,Float:radius,&Float:tx,&Float:ty);
native Random::PointOnCylinder2D(Float:x,Float:y,Float:minz,Float:maxz,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnCylinder3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnSphere(Float:x,Float:y,Float:z,Float:radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnRectangle(Float:minx,Float:miny,Float:maxx,Float:maxy,&Float:tx,&Float:ty);
native Random::PointOnCube(Float:minx,Float:miny,Float:minz,Float:maxx,Float:maxy,Float:maxz,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnCircularSector(Float:x,Float:y,Float:rz,Float:radius,Float:view_angle,&Float:tx,&Float:ty);
native Random::PointOnSphericalSector(Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnCone3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:pointA_radius,Float:pointB_radius,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnCube3D(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnEllipse(Float:cx,Float:cy,Float:size_x,Float:size_y,&Float:tx,&Float:ty);
native Random::PointOnEllipticalCyl2D(Float:cx,Float:cy,Float:minz,Float:maxz,Float:size_x,Float:size_y,&Float:tx,&Float:ty,&Float:tz);
native Random::PointOnClock(Float:x,Float:y,Float:radius,&Float:tx,&Float:ty,&Float:trz,Float:rz=INVALID_ROTATION);
native IsProbable(chance);
native Float:CalculatePercent(Float:value,Float:maxvalue);
native Float:GetPlayerTargetAngle(playerid,Float:x,Float:y,&Float:rz=0.0);
native Float:SetPlayerTargetAngle(playerid,Float:x,Float:y,&Float:rz=0.0);
native Float:GetPlayerTargetPlayerAngle(playerid,targetid,&Float:rz=0.0);
native Float:SetPlayerTargetPlayerAngle(playerid,targetid,&Float:rz=0.0);
native Float:GetVehicleSpeed(vehicleid);
native SetVehicleSpeed(vehicleid,Float:speed);
native Float:GetPlayerSpeed(playerid);
native CreateDynamicExplosion(Float:x,Float:y,Float:z,type,Float:radius,worldid=-1,interiorid=-1,playerid=-1,Float:distance=200.0);
native CreateDynamicExplosionDMG(Float:x,Float:y,Float:z,type,Float:radius,worldid=-1,interiorid=-1,playerid=-1,Float:distance=200.0,Float:damage=82.5,Float:vehicle_damage=82.5,byplayerid=INVALID_PLAYER_ID);
native SendFakeDamageInRadius(weaponid,bodypart,Float:damage,Float:vehicle_damage,Float:x,Float:y,Float:z,Float:radius,worldid=-1,interiorid=-1,playerid=-1,byplayerid=INVALID_PLAYER_ID);
native GetVehicleFlags(vehicleid);
native GetVehicleDefaultFlagsByModel(modelid);
native GetVehicleFlagsByModel(modelid);
native SetVehicleFlagsByModel(modelid,value);
native ToggleVehicleModelFlag(modelid,flag,bool:toggle);
native IsVehicleFlag(value,flag);
native GetWeaponShotPos(playerid,hittype,&Float:fx,&Float:fy,&Float:fz);
native SetPlayerLookAtPlayer(playerid,targetid,cut=CAMERA_CUT);
native GetPlayerCameraLookAt(playerid,&Float:x,&Float:y,&Float:z);
native IsPlayerLookAtSky(playerid);
native GetQuatUpVector(Float:qw,Float:qx,Float:qy,Float:qz,&Float:vx,&Float:vy,&Float:vz);
native Float:GetLineSize2D(Float:points[][],maxpoints=sizeof(points));
native Float:GetLineSize3D(Float:points[][],maxpoints=sizeof(points));
native IsVehicleInRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z);
native IsActorInRangeOfPoint(actorid,Float:range,Float:x,Float:y,Float:z);
native IsObjectInRangeOfPoint(objectid,Float:range,Float:x,Float:y,Float:z);
native ShiftLineRotation(Float:sX,Float:sY,Float:sZ,Float:eX,Float:eY,Float:eZ,Float:rx,Float:ry,Float:rz,&Float:nX,&Float:nY,&Float:nZ);
native ShiftLineRotationVector(Float:sX,Float:sY,Float:sZ,Float:eX,Float:eY,Float:eZ,Float:rx,Float:ry,Float:rz,&Float:nX,&Float:nY,&Float:nZ);
native Float:GetEllipseRadius(Float:x,Float:y,Float:angle);
native GetArcPoints3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:ry,Float:height,Float:points[][],max_points=sizeof(points));
native GetArcPointsFloor3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points));
native GetArcPointsCellar3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points));
native GetArcPointsLarboard3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points));
native GetArcPointsStarboard3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points));
native Float:GetDistanceFromPointToLine(Float:px,Float:py,Float:pz,Float:sX,Float:sY,Float:sZ,Float:eX,Float:eY,Float:eZ,&Float:iX=0.0,&Float:iY=0.0,&Float:iZ=0.0);
native ShiftOffsetToPosition(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:offset_x,Float:offset_y,Float:offset_z,&Float:tx,&Float:ty,&Float:tz);
native ShiftPositionToOffset(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,&Float:offset_x,&Float:offset_y,&Float:offset_z,Float:tx,Float:ty,Float:tz);
native Tryg3D::EulerToQuat(Float:rx,Float:ry,Float:rz,&Float:qw,&Float:qx,&Float:qy,&Float:qz);
native Tryg3D::QuatToEuler(&Float:rx,&Float:ry,&Float:rz,Float:qw,Float:qx,Float:qy,Float:qz);
native ShiftVectorRotation(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,&Float:tx,&Float:ty,&Float:tz);
native GetCube3DPoint(OrientationCube3D:orientation,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z,&Float:tx,&Float:ty,&Float:tz);
native IsPlayerFakeSpectating(playerid,bool:force_disable=true);
native GenerateGangZone(Float:x,Float:y,Float:radius,&Float:minx,&Float:miny,&Float:maxx,&Float:maxy);
native Float:GetCameraTargetDistance(Float:CamX,Float:CamY,Float:CamZ,Float:ObjX,Float:ObjY,Float:ObjZ,Float:FrX,Float:FrY,Float:FrZ);
native IsPlayerAimingAt(playerid,Float:x,Float:y,Float:z,Float:radius);
native Item::GetInvalidID(Item3D_Type:item_type);
native Item::GetPos(elementid,Item3D_Type:element_type,&Float:x,&Float:y,&Float:z);
native Item::GetVirtualWorld(TRYG3D_ELEMENT_TAG:elementid,Item3D_Type:element_type);
native Item::GetRotationQuat(elementid,Item3D_Type:element_type,&Float:qw,&Float:qx,&Float:qy,&Float:qz);
native Item::GetUpVector(elementid,Item3D_Type:element_type,&Float:vx,&Float:vy,&Float:vz);
native Item::GetUpPos(elementid,Item3D_Type:element_type,Float:radius,&Float:x,&Float:y,&Float:z,bool:reverse=false);
native Item::GetDistance(elementid,Item3D_Type:element_type,targetid,Item3D_Type:target_type);
native Item::GetDistanceFromPoint(elementid,Item3D_Type:element_type,Float:x,Float:y,Float:z);
native Item::OnPlayerScreen(playerid,targetid,Item3D_Type:target_type=item_player,element_orientation:orientation=o_front,Float:rx=INVALID_ROTATION,Float:rz=INVALID_ROTATION,Float:vrx=VERTICAL_CAMERA_RADIUS,Float:vrz=HORIZONTAL_CAMERA_RADIUS,bool:testLOS=true,bool:testVW=true,bool:veh_col=false);
native Item::OnFakeScreen(Float:x,Float:y,Float:z,targetid,Item3D_Type:target_type,Float:rx,Float:rz,Float:vrx=VERTICAL_CAMERA_RADIUS,Float:vrz=HORIZONTAL_CAMERA_RADIUS,bool:testLOS=true,bool:veh_col=false);
native Item::InCircle(elementid,Item3D_Type:element_type,Float:x,Float:y,Float:radius);
native Item::InCylinder3D(elementid,Item3D_Type:element_type,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:radius);
native Item::InCylinder2D(elementid,Item3D_Type:element_type,Float:x,Float:y,Float:minz,Float:maxz,Float:radius);
native Item::InSphere(elementid,Item3D_Type:element_type,Float:x,Float:y,Float:z,Float:radius);
native Item::InRectangle(elementid,Item3D_Type:element_type,Float:minx,Float:miny,Float:maxx,Float:maxy);
native Item::InCube(elementid,Item3D_Type:element_type,Float:minx,Float:miny,Float:minz,Float:maxx,Float:maxy,Float:maxz);
native Item::InPolygon(elementid,Item3D_Type:element_type,Float:points[],maxpoints=sizeof(points));
native Item::InCircularSector(elementid,Item3D_Type:element_type,Float:x,Float:y,Float:rz,Float:radius,Float:view_angle);
native Item::InSphericalSector(elementid,Item3D_Type:element_type,Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz);
native Item::InCone(elementid,Item3D_Type:element_type,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:pointA_radius,Float:pointB_radius);
native Item::InCube3D(elementid,Item3D_Type:element_type,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z);
native Item::GetToPointVector(elementid,Item3D_Type:element_type,Float:tx,Float:ty,Float:tz,&Float:vx,&Float:vy,&Float:vz);
native Item::GetRotatedVector(elementid,Item3D_Type:element_type,Float:tx,Float:ty,Float:tz,&Float:vx,&Float:vy,&Float:vz,bool:return_vector=true,Float:rx=0.0,Float:ry=0.0,Float:rz=0.0);
native Item::GetOrientationPos(elementid,Item3D_Type:element_type,element_orientation:orientation,Float:distance,&Float:tx,&Float:ty,&Float:tz);
native Item::InEllipse(elementid,Item3D_Type:element_type,Float:cx,Float:cy,Float:size_x,Float:size_y);
native Item::InEllipticalCylinder2D(elementid,Item3D_Type:element_type,Float:cx,Float:cy,Float:minz,Float:maxz,Float:size_x,Float:size_y);
native Item::ToItemIsWall(elementid,Item3D_Type:element_type,targetid,Item3D_Type:target_type);
native Item::ToPointIsWall(Float:x,Float:y,Float:z,targetid,Item3D_Type:target_type);
native Item::GetCollisionFlags(elementid,Item3D_Type:element_type);
native Item::IsPlayerInRange(playerid,Float:range,targetid,Item3D_Type:target_type=item_player,bool:testLOS=true,bool:veh_col=false);
native Item::InRangeOfPoint(Float:x,Float:y,Float:z,Float:range,targetid,Item3D_Type:target_type=item_player,bool:testLOS=true,bool:veh_col=false);
native Item::InRangeOfItem(elementid,Item3D_Type:element_type,Float:range,targetid,Item3D_Type:target_type=item_player,bool:testLOS=true,bool:veh_col=false);
native Item::GetOrientationPosCol(elementid,Item3D_Type:element_type,element_orientation:orientation,Float:distance,&Float:tx,&Float:ty,&Float:tz);
native Item::IsPointInWaterOrient(TRYG3D_ELEMENT_TAG:elementid,Item3D_Type:element_type,Float:radius,element_orientation:orientation=o_front);
native Item::InStream(elementid,Item3D_Type:element_type,Stream:StreamData[Stream3D]);
native Item::GetInStream(Stream:StreamData[Stream3D],Item3D_Type:element_type,element_list[],max_element=sizeof(element_list));
native Item::InDynamicArea(TRYG3D_ELEMENT_TAG:elementid,Item3D_Type:element_type,STREAMER_TAG_AREA:areaid);
native Item::GetInDynamicArea(STREAMER_TAG_AREA:areaid,Item3D_Type:element_type,element_list[],max_element=sizeof(element_list));
native ScreenToWorld(playerid,Float:screenX,Float:screenY,&Float:vX,&Float:vY,&Float:vZ);
native WorldToScreen(playerid,Float:x,Float:y,Float:z,&Float:screenX,&Float:screenY);
native ScreenToWorldCol(playerid,Float:distance,Float:screenX,Float:screenY,&Float:vX,&Float:vY,&Float:vZ);
native Tryg3D::NormCrossProduct(&Float:x,&Float:y,&Float:z,Float:v1x,Float:v1y,Float:v1z,Float:v2x,Float:v2y,Float:v2z);
native Tryg3D::GetRotationMatrixEuler(Float:matrix[][],Float:rx,Float:ry,Float:rz,T3D:eulermode:mode=T3D:euler_default);
native Tryg3D::MatrixRotate(Float:matrix[][],Float:oX,Float:oY,Float:oZ,&Float:x,&Float:y,&Float:z);
native Tryg3D::QuatRotate(Float:qw,Float:qx,Float:qy,Float:qz,Float:oX,Float:oY,Float:oZ,&Float:tx,&Float:ty,&Float:tz);
native Tryg3D::GetQuatFromEuler(Float:rx,Float:ry,Float:rz,&Float:qw,&Float:qx,&Float:qy,&Float:qz,T3D:eulermode:mode=T3D:euler_default);
native Tryg3D::EulerRotate(Float:rX,Float:rY,Float:rZ,Float:oX,Float:oY,Float:oZ,&Float:tx,&Float:ty,&Float:tz,T3D:eulermode:mode=T3D:euler_default);
native GetVehiclePartPos(vehicleid,partid,&Float:tx,&Float:ty,&Float:tz,Float:offset_x=0.0,Float:offset_y=0.0,Float:offset_z=0.0);
native GetDynamicVehiclePartPos(vehicleid,partid,&Float:tx,&Float:ty,&Float:tz,Float:offset_x=0.0,Float:offset_y=0.0,Float:offset_z=0.0);
native IsVehicleCollisionEnabled();
native Tryg3D::InitVehicleCollision(); //OnGameModeInit / OnFilterScriptInit
native Tryg3D::ExitVehicleCollision();
native Tryg3D::SyncVehicleCollision(vehicleid); //EVF -> OnVehicleCreated
native IsToggledVehicleCollision(vehicleid);
native ToggleVehicleCollision(vehicleid,bool:toggle);
native MovePointColWithVehicle(Float:StartX,Float:StartY,Float:StartZ,Float:EndX,Float:EndY,Float:EndZ,&Float:x,&Float:y,&Float:z);
native MovePointColWithVehicleCut(Float:StartX,Float:StartY,Float:StartZ,Float:EndX,Float:EndY,Float:EndZ,&Float:x,&Float:y,&Float:z,Float:cut_size=0.0);
native Item::ToPointIsVeh(Float:x,Float:y,Float:z,TRYG3D_ELEMENT_TAG:targetid,Item3D_Type:target_type);
native Item::ToItemIsVeh(TRYG3D_ELEMENT_TAG:elementid,Item3D_Type:element_type,TRYG3D_ELEMENT_TAG:targetid,Item3D_Type:target_type);
native Tryg3D::GetModuleName(Tryg3D::Module:moduleid);
native Tryg3D::GetModules(&modules_count=0);
native Tryg3D::IsModuleLoaded(Tryg3D::Module:moduleid);
native Tryg3D::GetErrorCount();
native Tryg3D::ResetErrorCount();
native Tryg3D::SetStreamDistance(Float:streamdistance); //default 300.0
native Tryg3D::GetStreamDistance();
native Tryg3D::GetActiveCount();
native Tryg3D::GetVersion(value);
native Animation::IsPlayerSkydiving(playerid);
native Animation::IsPlayerUsingParachute(playerid);
native Animation::IsPlayerAiming(playerid);
native Animation::IsPlayerStay(playerid);
native Animation::IsPlayerRunning(playerid);
native Animation::IsPlayerSwim(playerid);
native Animation::IsPlayerJump(playerid);
native Animation::IsPlayerParaFall(playerid);
native Animation::IsPlayerParaGlide(playerid);
native Animation::IsPlayerFall(playerid);
native Tryg3D::KeyPressed(key);
native Tryg3D::KeyReleased(key);
native Tryg3D::KeyHolding(key);
native Tryg3D::GetSAMIncludeVersion(value,name[],maxdest=sizeof(name));
native Tryg3D::SecToTimeDay(second);      //Use: %d:%02d:%02d:%02d
native Tryg3D::MSToTimeDay(millisecond);  //Use: %d:%02d:%02d:%02d
native Tryg3D::SecToTime(second);         //Use: %02d:%02d:%02d
native Tryg3D::MSToTime(millisecond);     //Use: %02d:%02d:%02d
native Tryg3D::SecToTimeMini(second);     //Use: %02d:%02d
native Tryg3D::MSToTimeMini(millisecond); //Use: %02d:%02d
native IsDynamicObjectInRangeOfPoint(objectid,Float:range,Float:x,Float:y,Float:z);
native SetPlayerAbsolutePosition(playerid,Float:x,Float:y,Float:z,Float:angle,worldid=-1,interiorid=-1,compensatedtime=-1,freezeplayer=1);
native SetPlayerAbsolutePositionVeh(playerid,Float:x,Float:y,Float:z,Float:angle,worldid=-1,interiorid=-1,compensatedtime=-1,freezeplayer=1);
native IsDynamicActorInRangeOfPoint(actorid,Float:range,Float:x,Float:y,Float:z);
native IsVehicleFullyInDynamicArea(vehicleid,areaid);
native Random::PointInDynamicArea(STREAMER_TAG_AREA:areaid,&Float:tx,&Float:ty,&Float:tz);